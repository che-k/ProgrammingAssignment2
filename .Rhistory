install.packages("KernSmooth")
library("KernSmooth")
exit
ls
cat
mean
q
mean(2,4)
debug
mean
ls
rownames
rownames
mkhngbhm
a <- matrix(c(1,2,3,5),2,2)
a
solve(a)
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
makeVector(c(1,2,3))
cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}
x<<-c(1,2,3)
mean(x)
setwd(/C/Users/Che/ProgrammingAssignment2)
setwd(C:/Users/Che/ProgrammingAssignment2)
getwd()
load("cachematrix.R")
a <- matrix(c(1,2,3,5),2,2)
makeCacheMatrix <- function(x = matrix()) {
mat<-NULL
  set<-function(y){
  x<<-y
  mat<<-NULL
}
get<-function() x
setmatrix<-function(solve) mat<<- solve
getmatrix<-function() mat
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
makeCacheMatrix(a)
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
mat<-x$getmatrix()
    if(!is.null(mat)){
      message("getting cached data")
      return(mat)
    }
    matrix<-x$get()
    mat<-solve(matrix, ...)
    x$setmatrix(mat)
    mat
}
cacheSolve(a)
v1<-c(1:10)
v1c<-makeVector(v1)
v1c
cachemean(v1c)
cachemean(v1c)
c() x
function() x
function(c()) x
mean() x
get <- function() x
get
x<-c(1,2)
get
makeCacheMatrix <- function(x = matrix()) {
invmat<-NULL
  set<-function(y){
  x<<-y
  invmat<<-NULL
}
get<-function() x
setinvmatrix<-function(inv1) invmat<<- inv1
getinvmatrix<-function() invmat
list(set=set, get=get, setinvmatrix=setinvmatrix, getinvmatrix=getinvmatrix)
}
## Write a short comment describing this function
l<-matrix
l<-matrix(1:4,2,2)
l
makeCacheMatrix(l
)
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
invmat<-x$getinvmatrix()
    if(!is.null(invmat)){
      message("getting cached data")
      return(invmat)
    }
    matrix<-x$get()
    invmat<-solve(matrix, ...)
    x$setinvmatrix(invmat)
    invmat
}
cacheSolve(l)
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
invmat<-x$getinvmatrix
    if(!is.null(invmat)){
      message("getting cached data")
      return(invmat)
    }
    matrix<-x$get()
    invmat<-solve(matrix, ...)
    x$setinvmatrix(invmat)
    invmat
}
cacheSolve(l)
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
invmat<-x[[getinvmatrix()]]
    if(!is.null(invmat)){
      message("getting cached data")
      return(invmat)
    }
    matrix<-x$get()
    invmat<-solve(matrix, ...)
    x$setinvmatrix(invmat)
    invmat
}
cacheSolve(l)
l <- matrix()
l
l
l<-matrix(1:4,2,2)
cacheSolve(l)
debug(cacheSolve(l))
debug(cacheSolve())
debug(cacheSolve(l))
makeCacheMatrix (l)
lc <- makeCacheMatrix(l)
cacheSolve(lc)
makeCacheMatrix <- function(x = matrix()) {
invmat<-NULL
  set<-function(y){
  x<<-y
  invmat<<-NULL
}
get<-function() {x}
setinvmatrix<-function(inv1) {invmat<<- inv1}
getinvmatrix<-function() {invmat}
list("set"=set, "get"=get, "setinvmatrix"=setinvmatrix, "getinvmatrix"=getinvmatrix)
}
makeCacheMatrix(l)
lc<-makeCacheMatrix(l)
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
invmat<-x$"getinvmatrix"
    if(!is.null(invmat)){
      message("getting cached data")
      return(invmat)
    }
    matrix<-x$get()
    invmat<-solve(matrix, ...)
    x$setinvmatrix(invmat)
    invmat
}
cacheSolve(lc)
lc\
lc
makeCacheMatrix <- function(x = matrix()) {
invmat<-NULL
  set<-function(y){
  x<<-y
  invmat<<-NULL
}
get<-function() {x}
setinvmatrix<-function(inv1) {invmat<<- inv1}
getinvmatrix<-function() {invmat}
list(set=set, get=get, setinvmatrix=setinvmatrix, getinvmatrix=getinvmatrix)
}
l <- matrix(c(6:10),2,2)
l <- matrix(c(7:10),2,2)
makeCacheMatrix(l)
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
invmat<-x$getinvmatrix()
    if(!is.null(invmat)){
      message("getting cached data")
      return(invmat)
    }
    matrix<-x$get()
    invmat<-solve(matrix, ...)
    x$setinvmatrix(invmat)
    invmat
}
l<-matrix(10:14,2,2)
l<-matrix(11:14,2,2)
lc<- makeCacheMatrix(l)
lc
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
invmat<-x$getinvmatrix()
    if(!is.null(invmat)){
      message("getting cached data")
      return(invmat)
    }
    matrix<-x$get()
    invmat<-solve(matrix, ...)
    x$setinvmatrix(invmat)
    invmat
}
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
invmat<-x$getinvmatrix()
    if(!is.null(invmat)){
      message("getting cached data")
      return(invmat)
    }
    matrix<-x$get()
    invmat<-solve(matrix, ...)
    x$setinvmatrix(invmat)
    invmat
}
cacheSolve(lc)
makeCacheMatrix <- function(x = matrix()) {
invmat<-NULL
  set<-function(y){
  x<<-y
  invmat<<-NULL
}
get<-function() {x}
setinvmatrix<-function(inv1) {invmat<<- inv1}
getinvmatrix<-function() {invmat}
list(set=set, get=get, setinvmatrix=setinvmatrix, getinvmatrix=getinvmatrix)
}
l<-matrix(1:9,3,3)
lc<-makeCacheMatrix (l)
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
invmat<-x$getinvmatrix()
    if(!is.null(invmat)){
      message("getting cached data")
      return(invmat)
    }
    matrix<-x$get()
    invmat<-solve(matrix, ...)
    x$setinvmatrix(invmat)
    invmat
}
cacheSolve(lc)
l<-matrix(c(1,2,3,0,1,4,5,6,0)
,3,3)
lc<-makeCacheMatrix (l)
cacheSolve(lc)
cacheSolve(lc)
l<-matrix(c(9,3,5,-6,-9,7,-1,-8,1),3,3)
lc<-makeCacheMatrix (l)
cacheSolve(lc)
q()
